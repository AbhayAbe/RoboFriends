{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","name","email","id","src","alt","CardList","robots","cardCompoent","map","user","i","key","Scroll","props","style","overflowY","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9b2fc072.chunk.js","sourcesContent":["import React from \"react\";\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 bg-lightest-blue ba b--green\"\r\n        type=\"search\"\r\n        placeholder=\"Search...\"\r\n        onChange={searchChange}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}`} alt=\"\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardCompoent = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardCompoent}</div>;\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n\r\n        height: \"80vh\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport \"./index.css\";\r\n\r\n//Redux\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robots) => {\r\n      return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <div>Please wait!</div>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"Heading f2\">RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}></SearchBox>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}></CardList>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  const url = \"http://jsonplaceholder.typicode.com/users\";\r\n  fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n//Robots[]\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCESS = \"REQUEST_ROBOTS_SUCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./containers/index.css\";\nimport { Provider, connect } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\n\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducer\";\n//redux-thunk for async operations\nimport thunkMiddleware from \"redux-thunk\";\n//Redux-logger\nimport { createLogger } from \"redux-logger\";\n//combineReducers\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}